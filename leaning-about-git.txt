1. What is Git, research benefits of Git
  - Git is a distributed version control system (VCS) that allows multiple people to collaborate on software development 
    projects. It tracks changes in source code during software development, allowing teams to manage and coordinate their
    work on the same codebase. Git allows you to record the history of changes, revert to previous versions, and merge 
    changes made by multiple contributors.
  - Benefits of Git:
    + Distributed Version Control: Every developer has a full copy of the repository, allowing offline work
    + Collaboration and Flexibility: Git allows easy branching and merging of changes between developers without 
      interrupting the main codebase.
    + Fast and Efficient: Git operates quickly and stores data efficiently, handling large projects and histories with ease.
    + Full History: Git keeps a complete history of changes, allowing you to revert to any previous version of the project.
    + Improved Code Quality: Supports code review and collaboration, helping to improve code quality .
    + Seamless Integration with Platforms:Git integrates with platforms like GitHub, GitLab, and others
    + Easy to Learn and Use: Git has simple commands, is easy to learn, and offers plenty of documentation 
      and community support.
    + Open Source and Free: Git is open-source, free to use, and does not require licensing fees, making it accessible
      to everyone.

2. What is a commit, the role of commits in Git
  - Commits are essential for tracking changes, maintaining project history, collaborating with others, and ensuring 
    the integrity (toàn vẹn) of your code
  - the role of commits in Git: They allow you to manage your codebase efficiently, revert to previous versions 
    when necessary, and provide a clear record of development progress.

3. Possible issues when a commit is broken
  - Merge Conflicts: When a commit introduces changes that conflict with changes in another branch or commit
  - Unwanted Changes or Mistakes: A commit might include changes that were not intended, such as debug code, 
    unfinished work, or incorrect modifications.
  - Incorrect Commit Message: The commit message may be vague or incorrect, making it difficult for others to 
    understand the purpose of the changes
  - Overwritten History (Force Push):  If a commit is rewritten (e.g., using git rebase) and pushed with a 
    force push (git push --force), it can rewrite history and affect other collaborators.
  - Incorrect Branch: Committing changes to the wrong branch can create inconsistencies ( 0 nhất quán) in 
    your project.